// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  // emailVerified DateTime?
  image     String?
  password  String? // For credentials users
  // provider      String    @default("credentials") // 'credentials' or 'google'
  // providerId    String? // Google's user ID for OAuth
  status    Int      @default(1)
  role      Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  faceImages     FaceImage?
  studentDetails StudentDetails?
  createdEvents  Event[]         @relation("UserCreatedEvents")
  attendance     Attendance[]
}

model StudentDetails {
  id        String   @id @default(cuid())
  studentId String   @unique
  userId    String   @unique
  courseId  String
  levelId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  level  Level  @relation(fields: [levelId], references: [id], onDelete: Cascade)
}

model Course {
  id             String           @id @default(cuid())
  code           String?           @unique
  name           String           @unique
  createdAt      DateTime         @default(now())
  studentDetails StudentDetails[]
}

model Level {
  id             String           @id @default(cuid())
  name           String           @unique
  createdAt      DateTime         @default(now())
  studentDetails StudentDetails[]
}

model FaceImage {
  id         String   @id @default(cuid())
  userId     String   @unique
  imageUrl   Bytes? // optional - original image (if you keep it)
  descriptor Json
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(cuid())
  eventTypeId String?
  createdById String?
  name        String
  description String?
  location    String?
  status      Int      @default(1) // 1=Draft, 2=Upcoming, 3=Ongoing, 4=Completed, 5=Cancelled, 6=Archived
  eventDate   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  eventSessions Session[]
  eventType     EventType?   @relation(fields: [eventTypeId], references: [id])
  createdBy     User?        @relation("UserCreatedEvents", fields: [createdById], references: [id], onDelete: Cascade)
  attendance    Attendance[]
}

model Session {
  id              String   @id @default(cuid())
  eventId         String
  type            Int      @default(1) //1 = morning, 2 = afternoon, 3 = evening
  startTime       String
  endTime         String?
  requiresTimeOut Int      @default(1)
  gracePeriod     Int      @default(40)
  allowEarlyIn    Int      @default(1)
  allowEarlyOut   Int      @default(1)
  status          Int      @default(1) //1=ongoing, 2=completed, 3=cancelled
  createdAt       DateTime @default(now())

  event      Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendance Attendance[]
}

model EventType {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  events      Event[]
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  sessionId String?
  eventId   String?
  status    Int      @default(1)
  type      Int      @default(1) //time in = 1, time out = 2
  method    Int      @default(1) //1 = face, 2 = qr, 3 manual
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  event   Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
