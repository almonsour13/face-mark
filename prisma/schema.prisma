// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  // emailVerified DateTime?
  image     String?
  password  String? // For credentials users
  // provider      String    @default("credentials") // 'credentials' or 'google'
  // providerId    String? // Google's user ID for OAuth
  status    Int      @default(1)
  role      Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  faceImages     FaceImage?
  studentDetails StudentDetails?
  createdEvents  Event[]         @relation("UserCreatedEvents")
  attendance     Attendance[]
}

model StudentDetails {
  id        String   @id @default(cuid())
  studentId String
  userId    String   @unique
  course    String
  level     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FaceImage {
  id         String   @id @default(cuid())
  userId     String   @unique
  imageUrl   Bytes? // optional - original image (if you keep it)
  descriptor Json
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String    @id @default(cuid())
  eventTypeId String?
  createdById String?
  name        String
  description String?
  startTime   DateTime
  endTime     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  eventType      EventType?   @relation(fields: [eventTypeId], references: [id])
  createdBy  User?         @relation("UserCreatedEvents", fields: [createdById], references: [id], onDelete: Cascade)
  attendance Attendance[]
}

model EventType {
  id        String   @id @default(cuid())
  name      String   @unique // e.g. "class", "seminar", "meeting"
  createdAt DateTime @default(now())

  events Event[]
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  status    Int   @default(1)
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
